{"ast":null,"code":"import { SIGNUP_SUCCESS, SIGNUP_ERROR, SIGNIN_SUCCESS, SIGNIN_ERROR, EMAIL_NOT_VERIFIED, SIGNOUT_SUCCESS, SIGNOUT_ERROR, RESET_SUCCESS, RESET_ERROR } from \"./actionTypes\";\nimport { beginApiCall, apiCallError } from \"./apiStatus\";\nimport firebase from \"../../services/firebase\"; // Signing up with Firebase\n\nexport const signup = (email, password) => async dispatch => {\n  try {\n    dispatch(beginApiCall());\n    firebase.auth().createUserWithEmailAndPassword(email, password).then(dataBeforeEmail => {\n      firebase.auth().onAuthStateChanged(function (user) {\n        user.sendEmailVerification();\n      });\n    }).then(dataAfterEmail => {\n      firebase.auth().onAuthStateChanged(function (user) {\n        if (user) {\n          // Sign up successful\n          dispatch({\n            type: SIGNUP_SUCCESS,\n            payload: \"Your account was successfully created! Now you need to verify your e-mail address, please go check your inbox.\"\n          });\n        } else {\n          // Signup failed\n          dispatch({\n            type: SIGNUP_ERROR,\n            payload: \"Something went wrong, we couldn't create your account. Please try again.\"\n          });\n        }\n      });\n    }).catch(() => {\n      dispatch(apiCallError());\n      dispatch({\n        type: SIGNUP_ERROR,\n        payload: \"Something went wrong, we couldn't create your account. Please try again.\"\n      });\n    });\n  } catch (err) {\n    dispatch(apiCallError());\n    dispatch({\n      type: SIGNUP_ERROR,\n      payload: \"Something went wrong, we couldn't create your account. Please try again.\"\n    });\n  }\n}; // Signing in with Firebase\n\nexport const signin = (email, password, callback) => async dispatch => {\n  try {\n    dispatch(beginApiCall());\n    firebase.auth().signInWithEmailAndPassword(email, password).then(data => {\n      if (data.user.emailVerified) {\n        console.log(\"IF\", data.user.emailVerified);\n        dispatch({\n          type: SIGNIN_SUCCESS\n        });\n        callback();\n      } else {\n        console.log(\"ELSE\", data.user.emailVerified);\n        dispatch({\n          type: EMAIL_NOT_VERIFIED,\n          payload: \"You haven't verified your e-mail address.\"\n        });\n      }\n    }).catch(() => {\n      dispatch(apiCallError());\n      dispatch({\n        type: SIGNIN_ERROR,\n        payload: \"Invalid login credentials\"\n      });\n    });\n  } catch (err) {\n    dispatch(apiCallError());\n    dispatch({\n      type: SIGNIN_ERROR,\n      payload: \"Invalid login credentials\"\n    });\n  }\n}; // Signing out with Firebase\n\nexport const signout = () => async dispatch => {\n  try {\n    dispatch(beginApiCall());\n    firebase.auth().signOut().then(() => {\n      dispatch({\n        type: SIGNOUT_SUCCESS\n      });\n    }).catch(() => {\n      dispatch(apiCallError());\n      dispatch({\n        type: SIGNOUT_ERROR,\n        payload: \"Error, we were not able to log you out. Please try again.\"\n      });\n    });\n  } catch (err) {\n    dispatch(apiCallError());\n    dispatch({\n      type: SIGNOUT_ERROR,\n      payload: \"Error, we were not able to log you out. Please try again.\"\n    });\n  }\n}; // Reset password with Firebase\n\nexport const resetPassword = email => async dispatch => {\n  try {\n    dispatch(beginApiCall());\n    firebase.auth().sendPasswordResetEmail(email).then(() => dispatch({\n      type: RESET_SUCCESS,\n      payload: \"Check your inbox. We've sent you a secured reset link by e-mail.\"\n    })).catch(() => {\n      dispatch(apiCallError());\n      dispatch({\n        type: RESET_ERROR,\n        payload: \"Oops, something went wrong we couldn't send you the e-mail. Try again and if the error persists, contact admin.\"\n      });\n    });\n  } catch (err) {\n    dispatch(apiCallError());\n    dispatch({\n      type: RESET_ERROR,\n      payload: err\n    });\n  }\n};","map":{"version":3,"sources":["/home/george/Documents/College/Third Year/CS353/workingserver/studybuddy/src/store/actions/auth.js"],"names":["SIGNUP_SUCCESS","SIGNUP_ERROR","SIGNIN_SUCCESS","SIGNIN_ERROR","EMAIL_NOT_VERIFIED","SIGNOUT_SUCCESS","SIGNOUT_ERROR","RESET_SUCCESS","RESET_ERROR","beginApiCall","apiCallError","firebase","signup","email","password","dispatch","auth","createUserWithEmailAndPassword","then","dataBeforeEmail","onAuthStateChanged","user","sendEmailVerification","dataAfterEmail","type","payload","catch","err","signin","callback","signInWithEmailAndPassword","data","emailVerified","console","log","signout","signOut","resetPassword","sendPasswordResetEmail"],"mappings":"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","sourcesContent":["import {\n  SIGNUP_SUCCESS,\n  SIGNUP_ERROR,\n  SIGNIN_SUCCESS,\n  SIGNIN_ERROR,\n  EMAIL_NOT_VERIFIED,\n  SIGNOUT_SUCCESS,\n  SIGNOUT_ERROR,\n  RESET_SUCCESS,\n  RESET_ERROR\n} from \"./actionTypes\";\nimport { beginApiCall, apiCallError } from \"./apiStatus\";\nimport firebase from \"../../services/firebase\";\n\n// Signing up with Firebase\nexport const signup = (email, password) => async dispatch => {\n  try {\n    dispatch(beginApiCall());\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then(dataBeforeEmail => {\n        firebase.auth().onAuthStateChanged(function(user) {\n          user.sendEmailVerification();\n        });\n      })\n      .then(dataAfterEmail => {\n        firebase.auth().onAuthStateChanged(function(user) {\n          if (user) {\n            // Sign up successful\n            dispatch({\n              type: SIGNUP_SUCCESS,\n              payload:\n                \"Your account was successfully created! Now you need to verify your e-mail address, please go check your inbox.\"\n            });\n          } else {\n            // Signup failed\n            dispatch({\n              type: SIGNUP_ERROR,\n              payload:\n                \"Something went wrong, we couldn't create your account. Please try again.\"\n            });\n          }\n        });\n      })\n      .catch(() => {\n        dispatch(apiCallError());\n        dispatch({\n          type: SIGNUP_ERROR,\n          payload:\n            \"Something went wrong, we couldn't create your account. Please try again.\"\n        });\n      });\n  } catch (err) {\n    dispatch(apiCallError());\n    dispatch({\n      type: SIGNUP_ERROR,\n      payload:\n        \"Something went wrong, we couldn't create your account. Please try again.\"\n    });\n  }\n};\n\n// Signing in with Firebase\nexport const signin = (email, password, callback) => async dispatch => {\n  try {\n    dispatch(beginApiCall());\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then(data => {\n        if (data.user.emailVerified) {\n          console.log(\"IF\", data.user.emailVerified);\n          dispatch({ type: SIGNIN_SUCCESS });\n          callback();\n        } else {\n          console.log(\"ELSE\", data.user.emailVerified);\n          dispatch({\n            type: EMAIL_NOT_VERIFIED,\n            payload: \"You haven't verified your e-mail address.\"\n          });\n        }\n      })\n      .catch(() => {\n        dispatch(apiCallError());\n        dispatch({\n          type: SIGNIN_ERROR,\n          payload: \"Invalid login credentials\"\n        });\n      });\n  } catch (err) {\n    dispatch(apiCallError());\n    dispatch({ type: SIGNIN_ERROR, payload: \"Invalid login credentials\" });\n  }\n};\n\n// Signing out with Firebase\nexport const signout = () => async dispatch => {\n  try {\n    dispatch(beginApiCall());\n    firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        dispatch({ type: SIGNOUT_SUCCESS });\n      })\n      .catch(() => {\n        dispatch(apiCallError());\n        dispatch({\n          type: SIGNOUT_ERROR,\n          payload: \"Error, we were not able to log you out. Please try again.\"\n        });\n      });\n  } catch (err) {\n    dispatch(apiCallError());\n    dispatch({\n      type: SIGNOUT_ERROR,\n      payload: \"Error, we were not able to log you out. Please try again.\"\n    });\n  }\n};\n\n// Reset password with Firebase\nexport const resetPassword = email => async dispatch => {\n  try {\n    dispatch(beginApiCall());\n    firebase\n      .auth()\n      .sendPasswordResetEmail(email)\n      .then(() =>\n        dispatch({\n          type: RESET_SUCCESS,\n          payload:\n            \"Check your inbox. We've sent you a secured reset link by e-mail.\"\n        })\n      )\n      .catch(() => {\n        dispatch(apiCallError());\n        dispatch({\n          type: RESET_ERROR,\n          payload:\n            \"Oops, something went wrong we couldn't send you the e-mail. Try again and if the error persists, contact admin.\"\n        });\n      });\n  } catch (err) {\n    dispatch(apiCallError());\n    dispatch({ type: RESET_ERROR, payload: err });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}