{"ast":null,"code":"import _objectSpread from \"/home/george/Documents/College/Third Year/CS353/workingserver/studybuddy/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/george/Documents/College/Third Year/CS353/workingserver/studybuddy/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\n\nconst useForm = (loginFunction, validate, isReset) => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        errors = _useState2[0],\n        setErrors = _useState2[1];\n\n  const _useState3 = useState({\n    email: \"\",\n    password: \"\"\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        credentials = _useState4[0],\n        setCredentials = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isSubmitting = _useState6[0],\n        setIsSubmitting = _useState6[1];\n\n  useEffect(() => {\n    // Checking if any error occurred during validation\n    // and if a form is still submitting\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      // If no errors and form still haven't been submitted\n      // We sign up or in the user according to the login function passed\n      loginFunction(); // Cleaning inputs after signup/in\n\n      setCredentials({\n        email: \"\",\n        password: \"\"\n      }); // Now that the form has been submitted we set isSubmitting back to false\n      // This prevents the form being submitted again and again each time useEffect is activated\n\n      setIsSubmitting(false);\n    }\n  }, [errors, isReset, isSubmitting, loginFunction]);\n\n  const handleSubmit = e => {\n    if (e) e.preventDefault();\n    setIsSubmitting(true); // Checking credentials for validation\n    // And passing validate output (which return eventual errors) into setErrors\n\n    setErrors(validate(credentials, isReset));\n  };\n\n  const handleChange = e => {\n    e.persist();\n    setCredentials(credentials => _objectSpread({}, credentials, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return [credentials, handleChange, handleSubmit, errors];\n};\n\nexport default useForm;","map":{"version":3,"sources":["/home/george/Documents/College/Third Year/CS353/workingserver/studybuddy/src/utils/useForm.js"],"names":["useState","useEffect","useForm","loginFunction","validate","isReset","errors","setErrors","email","password","credentials","setCredentials","isSubmitting","setIsSubmitting","Object","keys","length","handleSubmit","e","preventDefault","handleChange","persist","target","name","value"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAG,CAACC,aAAD,EAAgBC,QAAhB,EAA0BC,OAA1B,KAAsC;AAAA,oBACxBL,QAAQ,CAAC,EAAD,CADgB;AAAA;AAAA,QAC7CM,MAD6C;AAAA,QACrCC,SADqC;;AAAA,qBAEdP,QAAQ,CAAC;AAAEQ,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,QAAQ,EAAE;AAAvB,GAAD,CAFM;AAAA;AAAA,QAE7CC,WAF6C;AAAA,QAEhCC,cAFgC;;AAAA,qBAGZX,QAAQ,CAAC,KAAD,CAHI;AAAA;AAAA,QAG7CY,YAH6C;AAAA,QAG/BC,eAH+B;;AAKpDZ,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA,QAAIa,MAAM,CAACC,IAAP,CAAYT,MAAZ,EAAoBU,MAApB,KAA+B,CAA/B,IAAoCJ,YAAxC,EAAsD;AACpD;AACA;AACAT,MAAAA,aAAa,GAHuC,CAKpD;;AACAQ,MAAAA,cAAc,CAAC;AAAEH,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,QAAQ,EAAE;AAAvB,OAAD,CAAd,CANoD,CAQpD;AACA;;AACAI,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,GAfQ,EAeN,CAACP,MAAD,EAASD,OAAT,EAAkBO,YAAlB,EAAgCT,aAAhC,CAfM,CAAT;;AAiBA,QAAMc,YAAY,GAAGC,CAAC,IAAI;AACxB,QAAIA,CAAJ,EAAOA,CAAC,CAACC,cAAF;AACPN,IAAAA,eAAe,CAAC,IAAD,CAAf,CAFwB,CAIxB;AACA;;AACAN,IAAAA,SAAS,CAACH,QAAQ,CAACM,WAAD,EAAcL,OAAd,CAAT,CAAT;AACD,GAPD;;AASA,QAAMe,YAAY,GAAGF,CAAC,IAAI;AACxBA,IAAAA,CAAC,CAACG,OAAF;AACAV,IAAAA,cAAc,CAACD,WAAW,sBACrBA,WADqB;AAExB,OAACQ,CAAC,CAACI,MAAF,CAASC,IAAV,GAAiBL,CAAC,CAACI,MAAF,CAASE;AAFF,MAAZ,CAAd;AAID,GAND;;AAQA,SAAO,CAACd,WAAD,EAAcU,YAAd,EAA4BH,YAA5B,EAA0CX,MAA1C,CAAP;AACD,CAxCD;;AA0CA,eAAeJ,OAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useForm = (loginFunction, validate, isReset) => {\n  const [errors, setErrors] = useState({});\n  const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  useEffect(() => {\n    // Checking if any error occurred during validation\n    // and if a form is still submitting\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      // If no errors and form still haven't been submitted\n      // We sign up or in the user according to the login function passed\n      loginFunction();\n\n      // Cleaning inputs after signup/in\n      setCredentials({ email: \"\", password: \"\" });\n\n      // Now that the form has been submitted we set isSubmitting back to false\n      // This prevents the form being submitted again and again each time useEffect is activated\n      setIsSubmitting(false);\n    }\n  }, [errors, isReset, isSubmitting, loginFunction]);\n\n  const handleSubmit = e => {\n    if (e) e.preventDefault();\n    setIsSubmitting(true);\n\n    // Checking credentials for validation\n    // And passing validate output (which return eventual errors) into setErrors\n    setErrors(validate(credentials, isReset));\n  };\n\n  const handleChange = e => {\n    e.persist();\n    setCredentials(credentials => ({\n      ...credentials,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return [credentials, handleChange, handleSubmit, errors];\n};\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}