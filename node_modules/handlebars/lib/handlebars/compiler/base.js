import parser from './parser';
import WhitespaceControl from './whitespace-control';
import * as Helpers from './helpers';
import { extend } from '../utils';

export { parser };

let yy = {};
extend(yy, Helpers);

<<<<<<< HEAD
export function parseWithoutProcessing(input, options) {
=======
export function parse(input, options) {
>>>>>>> 7b0626896a94d30345cae2e06e39c066b5ad9207
  // Just return if an already-compiled AST was passed in.
  if (input.type === 'Program') { return input; }

  parser.yy = yy;

  // Altering the shared object here, but this is ok as parser is a sync operation
  yy.locInfo = function(locInfo) {
    return new yy.SourceLocation(options && options.srcName, locInfo);
  };

<<<<<<< HEAD
  let ast = parser.parse(input);

  return ast;
}

export function parse(input, options) {
  let ast = parseWithoutProcessing(input, options);
  let strip = new WhitespaceControl(options);

  return strip.accept(ast);
=======
  let strip = new WhitespaceControl(options);
  return strip.accept(parser.parse(input));
>>>>>>> 7b0626896a94d30345cae2e06e39c066b5ad9207
}
